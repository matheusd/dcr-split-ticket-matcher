syntax = "proto3";

package dcrticketmatcher;

service SplitTicketMatcherService {
    rpc WatchWaitingList (WatchWaitingListRequest) returns (stream WatchWaitingListResponse);
    rpc FindMatches (FindMatchesRequest) returns (FindMatchesResponse);
    rpc GenerateTicket (GenerateTicketRequest) returns (GenerateTicketResponse);
    rpc FundTicket (FundTicketRequest) returns (FundTicketResponse);
    rpc FundSplitTx (FundSplitTxRequest) returns (FundSplitTxResponse);
    rpc Status (StatusRequest) returns (StatusResponse);
    rpc BuyerError (BuyerErrorRequest) returns (BuyerErrorResponse);
}

message TxOut {
    uint64 value = 1;
    bytes script = 2;
}

message OutPoint {
    bytes prev_hash = 1;
    int32 prev_index = 2;
    int32 tree = 3;
}

message WatchWaitingListRequest {
    bool send_current = 1;
}
message WatchWaitingListResponse {
    message Queue {
        string name = 1;
        repeated uint64 amounts = 2;
    }
    repeated Queue queues = 1;
}

message FindMatchesRequest {
    uint32 protocol_version = 1;
    uint64 amount = 2;
    string session_name = 3;
    string vote_address = 4;
    string pool_address = 5;
}

message FindMatchesResponse {
    uint32 session_id = 1;
    uint64 amount = 2;
    uint64 fee = 3;
    uint64 pool_fee = 4;
    bytes mainchain_hash = 5;
    uint32 mainchain_height = 6;
    uint64 ticket_price = 7;
    uint32 nb_participants = 8;
}

message GenerateTicketRequest {
    uint32 session_id = 1;
    string commitment_address = 2;
    string split_tx_address = 3;
    TxOut split_tx_change = 4;
    repeated OutPoint split_tx_inputs = 5;
    bytes secretnb_hash = 6;
}

message GenerateTicketResponse {
    message Participant {
        uint64 amount = 1;
        bytes secretnb_hash = 2;
        bytes vote_pk_script = 3;
        bytes pool_pk_script = 4;
    }
    bytes split_tx = 1;
    bytes ticket_template = 2;
    repeated Participant participants = 3;
    uint32 index = 4;
}

message FundTicketRequest {
    message FundedParticipantTicket {
        bytes ticket_input_scriptsig = 1;
    }
    uint32 session_id = 1;
    repeated FundedParticipantTicket tickets = 2;
    bytes revocation_script_sig = 3;
}

message FundTicketResponse {
    message FundedParticipantTicket {
        bytes ticket = 1;
        bytes revocation = 2;
    }
    repeated FundedParticipantTicket tickets = 1;
}

message FundSplitTxRequest {
    uint32 session_id = 1;
    repeated bytes split_tx_scriptsigs = 2;
    uint64 secretnb = 3;
}

message FundSplitTxResponse {
    bytes split_tx = 1;
    repeated uint64 secret_numbers = 2;
}

message StatusRequest { }
message StatusResponse {
    uint64 ticket_price = 1;
    uint32 protocol_version = 2;
}

message BuyerErrorRequest {
    uint32 session_id = 1;
    string error_msg = 2;
}
message BuyerErrorResponse { }
